# ----------------------------------------------------------------------------------------------------
# Template to deploy Azure Resources in a bicep file in one environment
# This template is optimized for a Linux build agent -- see create-infra-win.yml for a Windows build agent
# ----------------------------------------------------------------------------------------------------
parameters:
  - name: environmentName
    default: "DEV"
  - name: templateFolderName
    default: "infra/bicep"
  - name: templateFileName
    default: "main-complete.bicep"
  - name: parameterFileName
    default: "main-complete.azdo.bicepparam"
  - name: deploymentMode
    default: "Incremental" # 'Incremental' | 'Complete' | 'Validation'
  - name: deployToResourceGroup
    default: false

# ----------------------------------------------------------------------------------------------------
jobs:
  - deployment: CreateInfra
    displayName: Initialize Create Infra
    environment: ${{ parameters.environmentName }}

  - job: CreateInfraJob
    displayName: Create Infrastructure
    variables:
      - name: environmentName
        value: ${{ parameters.environmentName }}
      - name: environmentNameUpper
        value: ${{ upper(parameters.environmentName) }}
      - name: environmentNameLower
        value: ${{ lower(parameters.environmentName) }}
      - name: templateFile
        value: "$(Pipeline.Workspace)/s/${{ parameters.templateFolderName }}/${{ parameters.templateFileName }}"
      - name: parameterFile
        value: "$(Pipeline.Workspace)/s/${{ parameters.templateFolderName }}/${{ parameters.parameterFileName }}"

      # Bring in environment common variable file
      - template: ../../vars/var-service-connections.yml
      - template: ../../vars/var-common.yml
      - template: ../../vars/var-source-location-app.yml

      # Bring in environment specific variable files
      - ${{ if eq(lower(parameters.environmentName), 'dev') }}:
          - template: ../../vars/var-dev.yml
      - ${{ if eq(lower(parameters.environmentName), 'qa') }}:
          - template: ../../vars/var-qa.yml
      - ${{ if eq(lower(parameters.environmentName), 'prod') }}:
          - template: ../../vars/var-prod.yml

    # ----------------------------------------------------------------------------------------------------
    steps:
      - bash: |
          echo "appName=$(appName)"
          appNameLower=$(echo "$(appName)" | tr '[:upper:]' '[:lower:]')
          echo "appNameLower=$appNameLower"
          echo "##vso[task.setvariable variable=appNameLower]$appNameLower"

          echo "appPrefix=$(appPrefix)"
          appPrefixLower=$(echo "$(appPrefix)" | tr '[:upper:]' '[:lower:]')
          echo "appPrefixLower=$appPrefixLower"
          echo "##vso[task.setvariable variable=appPrefixLower]$appPrefixLower"

          echo "environmentName=$(environmentName)"
          echo "environmentNameLower=$(environmentNameLower)"
          echo "appNameLower=$appNameLower"

          if [[ -z $appNameLower ]]; then
            echo "Creating using prefix: rg_""$appPrefixLower""_$(environmentNameLower)"
            resourceGroupName=$(echo "rg_""$appPrefixLower""_$(environmentNameLower)")
          else
            echo "Creating using name: rg_""$appNameLower""_$(environmentNameLower)"
            resourceGroupName=$(echo "rg_""$appNameLower""_$(environmentNameLower)")
          fi
          echo "resourceGroupName=$resourceGroupName"
          echo "##vso[task.setvariable variable=resourceGroupName]$resourceGroupName"

          runDateTime=$(echo $(date '+%Y%m%d-%H%M%S'))
          echo "##vso[task.setvariable variable=runDateTime]$runDateTime"
          echo "runDateTime=$runDateTime"

          runDateTimeZ=$(echo $(date '+%Y%m%dT%H%M%SZ'))
          echo "##vso[task.setvariable variable=runDateTimeZ]$runDateTimeZ"
          echo "runDateTimeZ=$runDateTimeZ"
        displayName: "Create Variables"
        continueOnError: true

      - bash: |
          echo "environmentName=${{ parameters.environmentName }}"
          echo "templateFolderName=${{ parameters.templateFolderName }}"
          echo "templateFileName=${{ parameters.templateFileName }}"
          echo "parameterFileName=${{ parameters.parameterFileName }}"
          echo "deploymentMode=${{ parameters.deploymentMode }}"
          echo "resourceGroupName=$(resourceGroupName)"
          echo "appName=$(appName)"
          echo "appNameLower=$(appNameLower)"
          echo "appPrefix=$(appPrefix)"
          echo "appPrefixLower=$(appPrefixLower)"

          echo "##[group]Display All Environment Variables:"
          printenv | sort
          echo "##[endgroup]"

          echo "----------------------------------------"
          echo "##[group]Directory of pipeline workspace:"
          tree -L 4 $(Pipeline.Workspace)
          echo "##[endgroup]"
        displayName: "Display Variables and Files"
        continueOnError: true

      - task: qetza.replacetokens.replacetokens-task.replacetokens@5
        displayName: "Update Parameter File"
        inputs:
          targetFiles: $(parameterFile)
          tokenPrefix: "#{"
          tokenSuffix: "}#"

      - task: CmdLine@2
        displayName: Display Parameter File Contents
        continueOnError: true
        inputs:
          script: |
            echo "Bicep File Name: $(templateFile)"
            echo "##[group]Contents of Parameter File  $(parameterFile)"
            cat  $(parameterFile)
            echo "##[endgroup]"

      # in order to use multiple dynamic service connections, you can't just use a variable.
      # they need to be defined and available at YML pre-compile time, so use this technique.
      # this switch allows you to dynamically select a 'hard-coded' service connection
      - ${{ if eq(variables.environmentNameUpper, 'DEV') }}:
          - template: steps-deploy-bicep-template.yml
            parameters:
              serviceConnectionName: $(serviceConnectionDEV)
      - ${{ if eq(variables.environmentNameUpper, 'QA') }}:
          - template: steps-deploy-bicep-template.yml
            parameters:
              serviceConnectionName: $(serviceConnectionQA)
      - ${{ if eq(variables.environmentNameUpper, 'PROD') }}:
          - template: steps-deploy-bicep-template.yml
            parameters:
              serviceConnectionName: $(serviceConnectionPROD)

      - bash: |
          echo "WIPED!" > $(parameterFile)
        displayName: "Wipe Parameter File"
        condition: always()
